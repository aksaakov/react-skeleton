{"ast":null,"code":"var _jsxFileName = \"/home/aksaakov/Projects/collaborative-editor/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useEffect, useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport * as Y from 'yjs';\nimport { IndexeddbPersistence } from 'y-indexeddb';\nimport { WebrtcProvider } from 'y-webrtc';\nimport { QuillBinding } from 'y-quill';\nimport Quill from 'quill';\nimport QuillCursors from 'quill-cursors';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport * as awarenessProtocol from 'y-protocols/awareness.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  uniqueNamesGenerator,\n  colors,\n  animals,\n  adjectives\n} = require('unique-names-generator');\n\nQuill.register('modules/cursors', QuillCursors);\n\nfunction App() {\n  _s();\n\n  let quillRef = null;\n  let reactQuillRef = null;\n  const [username, setUsername] = useState(''); // name randomiser\n\n  const customColors = ['green', 'blue', 'red', 'yellow', 'orange', 'pink', 'purple'];\n  const randomName = uniqueNamesGenerator({\n    dictionaries: [adjectives, colors, animals],\n    separator: ' ',\n    length: 2\n  }); // big_red_donkey\n\n  const randomColor = uniqueNamesGenerator({\n    dictionaries: [customColors],\n    length: 1\n  }); // big_red_donkey\n  //yjs\n\n  const ydoc = new Y.Doc();\n  const ytext = ydoc.getText(); // webrtc\n\n  const webrtcOpts = {\n    filterBcConns: true,\n    awareness: new awarenessProtocol.Awareness(ydoc)\n  };\n  const webrtcProvider = new WebrtcProvider('text-editor-input', ydoc, webrtcOpts);\n  webrtcProvider.awareness.setLocalStateField('user', {\n    name: randomName,\n    color: randomColor\n  }); //indexed db\n\n  const indexeddbProvider = new IndexeddbPersistence('user', ydoc);\n  indexeddbProvider.on('synced', () => {\n    console.log('content from the database is loaded');\n  }); // indexeddbProvider.del('username')\n  // indexeddbProvider.get('username').then(function(username) {\n  // //   if (username) {\n  // //     setUsername(username)\n  // //   } else {\n  // //     indexeddbProvider.set('username', randomName)\n  // //     console.log('username was set to ' + username)\n  // //   }\n  // // }, function(err) {\n  // //   console.log('no username', err); // Error: \"It broke\"\n  // });\n\n  useEffect(() => {\n    attachQuillRefs(); // new QuillBinding(ytext, quillRef, webrtcProvider.awareness)\n  }, []);\n\n  const attachQuillRefs = () => {\n    if (typeof reactQuillRef.getEditor !== 'function') return;\n    quillRef = reactQuillRef.getEditor();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"You are: \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        ref: el => {\n          reactQuillRef = el;\n        },\n        theme: 'snow',\n        modules: {\n          cursors: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vvPqiwmcocEAjsjiwnE6bJ+J4Yk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aksaakov/Projects/collaborative-editor/src/App.js"],"names":["makeStyles","TextField","React","useEffect","useState","CssBaseline","Container","Y","IndexeddbPersistence","WebrtcProvider","QuillBinding","Quill","QuillCursors","ReactQuill","awarenessProtocol","uniqueNamesGenerator","colors","animals","adjectives","require","register","App","quillRef","reactQuillRef","username","setUsername","customColors","randomName","dictionaries","separator","length","randomColor","ydoc","Doc","ytext","getText","webrtcOpts","filterBcConns","awareness","Awareness","webrtcProvider","setLocalStateField","name","color","indexeddbProvider","on","console","log","attachQuillRefs","getEditor","el","cursors"],"mappings":"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","sourcesContent":["import './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useEffect, useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport * as Y from 'yjs'\nimport { IndexeddbPersistence } from 'y-indexeddb'\nimport { WebrtcProvider } from 'y-webrtc'\nimport { QuillBinding } from 'y-quill'\nimport Quill from 'quill';\nimport QuillCursors from 'quill-cursors'\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport * as awarenessProtocol from 'y-protocols/awareness.js'\nconst { uniqueNamesGenerator, colors, animals, adjectives } = require('unique-names-generator');\n\nQuill.register('modules/cursors', QuillCursors)\n\nfunction App() {\n  let quillRef=null;\n  let reactQuillRef=null;\n  const [username, setUsername] = useState('');\n\n  // name randomiser\n  const customColors = [\n    'green', 'blue', 'red', 'yellow', 'orange', 'pink', 'purple'\n  ]\n  const randomName = uniqueNamesGenerator({ dictionaries: [adjectives, colors, animals], separator: ' ' , length: 2, }); // big_red_donkey\n  const randomColor = uniqueNamesGenerator({ dictionaries: [customColors], length: 1 }); // big_red_donkey\n\n  //yjs\n  const ydoc = new Y.Doc()\n  const ytext = ydoc.getText()\n\n  // webrtc\n  const webrtcOpts = { \n    filterBcConns: true, \n    awareness: new awarenessProtocol.Awareness(ydoc)\n  }\n  const webrtcProvider = new WebrtcProvider('text-editor-input', ydoc, webrtcOpts)\n  webrtcProvider.awareness.setLocalStateField('user', {\n    name: randomName,\n    color: randomColor\n  })\n\n  //indexed db\n  const indexeddbProvider = new IndexeddbPersistence('user', ydoc)\n  indexeddbProvider.on('synced', () => {\n    console.log('content from the database is loaded')\n  })\n  // indexeddbProvider.del('username')\n  \n  // indexeddbProvider.get('username').then(function(username) {\n  // //   if (username) {\n  // //     setUsername(username)\n  // //   } else {\n  // //     indexeddbProvider.set('username', randomName)\n  // //     console.log('username was set to ' + username)\n  // //   }\n  // // }, function(err) {\n  // //   console.log('no username', err); // Error: \"It broke\"\n    \n  // });\n\n  useEffect(()=>{\n    attachQuillRefs()\n    // new QuillBinding(ytext, quillRef, webrtcProvider.awareness)\n  }, [])\n\n  const attachQuillRefs = () => {\n    if (typeof reactQuillRef.getEditor !== 'function') return;\n    quillRef = reactQuillRef.getEditor();\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\" className=\"container\"> \n        <span>You are: {username}</span>\n        {/* <form className={classes.root} noValidate autoComplete=\"off\">\n        </form> */}\n        <ReactQuill \n          ref={(el) => { reactQuillRef = el }}\n          theme={'snow'} \n          modules={{ cursors:true }}  \n        />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}