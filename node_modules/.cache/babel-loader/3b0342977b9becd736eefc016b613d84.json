{"ast":null,"code":"var _jsxFileName = \"/home/aksaakov/Projects/collaborative-editor/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useEffect, useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport * as Y from 'yjs';\nimport { IndexeddbPersistence } from 'y-indexeddb';\nimport { WebrtcProvider } from 'y-webrtc';\nimport { QuillBinding } from 'y-quill';\nimport Quill from 'quill';\nimport QuillCursors from 'quill-cursors';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  uniqueNamesGenerator,\n  colors,\n  animals,\n  adjectives\n} = require('unique-names-generator');\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '100%'\n    }\n  }\n}));\nQuill.register('modules/cursors', QuillCursors);\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  let quillRef = null;\n  let reactQuillRef = null;\n  const [username, setUsername] = useState('');\n  const colors = ['green', 'blue', 'red', 'yellow', 'orange', 'pink', 'purple'];\n  const randomName = uniqueNamesGenerator({\n    dictionaries: [adjectives, colors, animals],\n    separator: ' ',\n    length: 2\n  }); // big_red_donkey\n\n  const randomColor = uniqueNamesGenerator({\n    dictionaries: [colors],\n    length: 1\n  }); // big_red_donkey\n\n  const ydoc = new Y.Doc();\n  const indexeddbProvider = new IndexeddbPersistence('y-text-sync', ydoc);\n  const webrtcProvider = new WebrtcProvider('y-text-sync', ydoc);\n  indexeddbProvider.on('synced', () => {\n    console.log('content from the database is loaded');\n  }); // indexeddbProvider.del('username')\n\n  indexeddbProvider.get('username').then(function (username) {\n    if (username) {\n      setUsername(username);\n    } else {\n      indexeddbProvider.set('username', randomName);\n      console.log('username was set to ' + username);\n    }\n  }, function (err) {\n    console.log('no username', err); // Error: \"It broke\"\n  });\n  useEffect(() => {\n    attachQuillRefs();\n    const ytext = ydoc.getText('editor'); // \"Bind\" the quill editor to a Yjs text type.\n\n    new QuillBinding(ytext, quillRef, webrtcProvider.awareness);\n    webrtcProvider.awareness.setLocalStateField('user', {\n      name: randomName,\n      color: randomColor\n    });\n  }, []);\n\n  const attachQuillRefs = () => {\n    if (typeof reactQuillRef.getEditor !== 'function') return;\n    quillRef = reactQuillRef.getEditor();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"You are: \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        ref: el => {\n          reactQuillRef = el;\n        },\n        theme: 'snow',\n        modules: {\n          cursors: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"W4WrJl2YYa1GH5h0b2Q9StoFTJI=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aksaakov/Projects/collaborative-editor/src/App.js"],"names":["makeStyles","TextField","React","useEffect","useState","CssBaseline","Container","Y","IndexeddbPersistence","WebrtcProvider","QuillBinding","Quill","QuillCursors","ReactQuill","uniqueNamesGenerator","colors","animals","adjectives","require","useStyles","theme","root","margin","spacing","width","register","App","classes","quillRef","reactQuillRef","username","setUsername","randomName","dictionaries","separator","length","randomColor","ydoc","Doc","indexeddbProvider","webrtcProvider","on","console","log","get","then","set","err","attachQuillRefs","ytext","getText","awareness","setLocalStateField","name","color","getEditor","el","cursors"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAO,KAAKC,CAAZ,MAAmB,KAAnB;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,iCAAP;;;AACA,MAAM;AAAEC,EAAAA,oBAAF;AAAwBC,EAAAA,MAAxB;AAAgCC,EAAAA,OAAhC;AAAyCC,EAAAA;AAAzC,IAAwDC,OAAO,CAAC,wBAAD,CAArE;;AAEA,MAAMC,SAAS,GAAGnB,UAAU,CAAEoB,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJ,4BAAwB;AACtBC,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADc;AAEtBC,MAAAA,KAAK,EAAE;AAFe;AADpB;AADiC,CAAZ,CAAD,CAA5B;AASAb,KAAK,CAACc,QAAN,CAAe,iBAAf,EAAkCb,YAAlC;;AAEA,SAASc,GAAT,GAAe;AAAA;;AACb,QAAMC,OAAO,GAAGR,SAAS,EAAzB;AACA,MAAIS,QAAQ,GAAC,IAAb;AACA,MAAIC,aAAa,GAAC,IAAlB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMW,MAAM,GAAG,CACb,OADa,EACJ,MADI,EACI,KADJ,EACW,QADX,EACqB,QADrB,EAC+B,MAD/B,EACuC,QADvC,CAAf;AAGA,QAAMiB,UAAU,GAAGlB,oBAAoB,CAAC;AAAEmB,IAAAA,YAAY,EAAE,CAAChB,UAAD,EAAaF,MAAb,EAAqBC,OAArB,CAAhB;AAA+CkB,IAAAA,SAAS,EAAE,GAA1D;AAAgEC,IAAAA,MAAM,EAAE;AAAxE,GAAD,CAAvC,CATa,CAS0G;;AACvH,QAAMC,WAAW,GAAGtB,oBAAoB,CAAC;AAAEmB,IAAAA,YAAY,EAAE,CAAClB,MAAD,CAAhB;AAA0BoB,IAAAA,MAAM,EAAE;AAAlC,GAAD,CAAxC,CAVa,CAUoE;;AAEjF,QAAME,IAAI,GAAG,IAAI9B,CAAC,CAAC+B,GAAN,EAAb;AAEA,QAAMC,iBAAiB,GAAG,IAAI/B,oBAAJ,CAAyB,aAAzB,EAAwC6B,IAAxC,CAA1B;AACA,QAAMG,cAAc,GAAG,IAAI/B,cAAJ,CAAmB,aAAnB,EAAkC4B,IAAlC,CAAvB;AAEAE,EAAAA,iBAAiB,CAACE,EAAlB,CAAqB,QAArB,EAA+B,MAAM;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD,GAFD,EAjBa,CAoBb;;AAEAJ,EAAAA,iBAAiB,CAACK,GAAlB,CAAsB,UAAtB,EAAkCC,IAAlC,CAAuC,UAASf,QAAT,EAAmB;AACxD,QAAIA,QAAJ,EAAc;AACZC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACD,KAFD,MAEO;AACLS,MAAAA,iBAAiB,CAACO,GAAlB,CAAsB,UAAtB,EAAkCd,UAAlC;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBb,QAArC;AACD;AACF,GAPD,EAOG,UAASiB,GAAT,EAAc;AACfL,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BI,GAA3B,EADe,CACkB;AAElC,GAVD;AAWA5C,EAAAA,SAAS,CAAC,MAAI;AACZ6C,IAAAA,eAAe;AAEf,UAAMC,KAAK,GAAGZ,IAAI,CAACa,OAAL,CAAa,QAAb,CAAd,CAHY,CAKZ;;AACA,QAAIxC,YAAJ,CAAiBuC,KAAjB,EAAwBrB,QAAxB,EAAkCY,cAAc,CAACW,SAAjD;AAEAX,IAAAA,cAAc,CAACW,SAAf,CAAyBC,kBAAzB,CAA4C,MAA5C,EAAoD;AAClDC,MAAAA,IAAI,EAAErB,UAD4C;AAElDsB,MAAAA,KAAK,EAAElB;AAF2C,KAApD;AAID,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMY,eAAe,GAAG,MAAM;AAC5B,QAAI,OAAOnB,aAAa,CAAC0B,SAArB,KAAmC,UAAvC,EAAmD;AACnD3B,IAAAA,QAAQ,GAAGC,aAAa,CAAC0B,SAAd,EAAX;AACD,GAHD;;AAKA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAyB,MAAA,SAAS,EAAC,WAAnC;AAAA,8BACE;AAAA,gCAAgBzB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,UAAD;AACE,QAAA,GAAG,EAAG0B,EAAD,IAAQ;AAAE3B,UAAAA,aAAa,GAAG2B,EAAhB;AAAoB,SADrC;AAEE,QAAA,KAAK,EAAE,MAFT;AAGE,QAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAC;AAAV;AAHX;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAnEQ/B,G;UACSP,S;;;KADTO,G;AAqET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useEffect, useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport * as Y from 'yjs'\nimport { IndexeddbPersistence } from 'y-indexeddb'\nimport { WebrtcProvider } from 'y-webrtc'\nimport { QuillBinding } from 'y-quill'\nimport Quill from 'quill';\nimport QuillCursors from 'quill-cursors'\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nconst { uniqueNamesGenerator, colors, animals, adjectives } = require('unique-names-generator');\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '100%',\n    },\n  },\n}));\n\nQuill.register('modules/cursors', QuillCursors)\n\nfunction App() {\n  const classes = useStyles();\n  let quillRef=null;\n  let reactQuillRef=null;\n  const [username, setUsername] = useState('');\n\n  const colors = [\n    'green', 'blue', 'red', 'yellow', 'orange', 'pink', 'purple'\n  ]\n  const randomName = uniqueNamesGenerator({ dictionaries: [adjectives, colors, animals], separator: ' ' , length: 2, }); // big_red_donkey\n  const randomColor = uniqueNamesGenerator({ dictionaries: [colors], length: 1 }); // big_red_donkey\n\n  const ydoc = new Y.Doc()\n\n  const indexeddbProvider = new IndexeddbPersistence('y-text-sync', ydoc)\n  const webrtcProvider = new WebrtcProvider('y-text-sync', ydoc)\n\n  indexeddbProvider.on('synced', () => {\n    console.log('content from the database is loaded')\n  })\n  // indexeddbProvider.del('username')\n  \n  indexeddbProvider.get('username').then(function(username) {\n    if (username) {\n      setUsername(username)\n    } else {\n      indexeddbProvider.set('username', randomName)\n      console.log('username was set to ' + username)\n    }\n  }, function(err) {\n    console.log('no username', err); // Error: \"It broke\"\n    \n  });\n  useEffect(()=>{\n    attachQuillRefs()\n   \n    const ytext = ydoc.getText('editor')\n  \n    // \"Bind\" the quill editor to a Yjs text type.\n    new QuillBinding(ytext, quillRef, webrtcProvider.awareness)\n\n    webrtcProvider.awareness.setLocalStateField('user', {\n      name: randomName,\n      color: randomColor\n    })\n  }, [])\n\n  const attachQuillRefs = () => {\n    if (typeof reactQuillRef.getEditor !== 'function') return;\n    quillRef = reactQuillRef.getEditor();\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\" className=\"container\"> \n        <span>You are: {username}</span>\n        {/* <form className={classes.root} noValidate autoComplete=\"off\">\n        </form> */}\n        <ReactQuill \n          ref={(el) => { reactQuillRef = el }}\n          theme={'snow'} \n          modules={{ cursors:true }}  \n        />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}