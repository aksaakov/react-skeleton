{"ast":null,"code":"/* global localStorage, addEventListener */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n\n\n  setItem(key, newValue) {\n    this.map.set(key, newValue);\n  }\n  /**\n   * @param {string} key\n   */\n\n\n  getItem(key) {\n    return this.map.get(key);\n  }\n\n}\n/* istanbul ignore next */\n\n/**\n * @type {any}\n */\n\n\nlet _localStorage = new VarStoragePolyfill();\n\nlet usePolyfill = true;\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage;\n    usePolyfill = false;\n  }\n} catch (e) {}\n/* istanbul ignore next */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n\n\nexport const varStorage = _localStorage;\n/* istanbul ignore next */\n\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\n\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage',\n/** @type {any} */\neventHandler);","map":{"version":3,"sources":["/home/aksaakov/Projects/collaborative-editor/node_modules/lib0/storage.js"],"names":["VarStoragePolyfill","constructor","map","Map","setItem","key","newValue","set","getItem","get","_localStorage","usePolyfill","localStorage","e","varStorage","onChange","eventHandler","addEventListener"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,kBAAN,CAAyB;AACvBC,EAAAA,WAAW,GAAI;AACb,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,OAAO,CAAEC,GAAF,EAAOC,QAAP,EAAiB;AACtB,SAAKJ,GAAL,CAASK,GAAT,CAAaF,GAAb,EAAkBC,QAAlB;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,OAAO,CAAEH,GAAF,EAAO;AACZ,WAAO,KAAKH,GAAL,CAASO,GAAT,CAAaJ,GAAb,CAAP;AACD;;AAlBsB;AAqBzB;;AACA;AACA;AACA;;;AACA,IAAIK,aAAa,GAAG,IAAIV,kBAAJ,EAApB;;AACA,IAAIW,WAAW,GAAG,IAAlB;;AAEA,IAAI;AACF;;AACA;AACA,MAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC;AACvCF,IAAAA,aAAa,GAAGE,YAAhB;AACAD,IAAAA,WAAW,GAAG,KAAd;AACD;AACF,CAPD,CAOE,OAAOE,CAAP,EAAU,CAAG;AAEf;;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,UAAU,GAAGJ,aAAnB;AAEP;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,QAAQ,GAAGC,YAAY,IAAIL,WAAW,IAAIM,gBAAgB,CAAC,SAAD;AAAY;AAAoBD,YAAhC,CAAhE","sourcesContent":["/* global localStorage, addEventListener */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n\n/* istanbul ignore next */\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n"]},"metadata":{},"sourceType":"module"}